<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518"
     xmlns="http://www.w3.org/2000/svg">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>NComponents::BasicFunction&lt;void  (868,896,094 samples, 31.04%)</title><rect x="10.0" y="357" width="366.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.02" y="367.5" >NComponents::BasicFunction&lt;void </text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="437" width="76.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1116.30" y="447.5" >entry_SY..</text>
</g>
<g >
<title>do_exit (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="357" width="76.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1116.30" y="367.5" >do_exit</text>
</g>
<g >
<title>mmput (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="325" width="76.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1116.30" y="335.5" >mmput</text>
</g>
<g >
<title>change_protection_range (122,103,088 samples, 4.36%)</title><rect x="61.5" y="133" width="51.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="64.50" y="143.5" >chang..</text>
</g>
<g >
<title>__pte_offset_map_lock (41,058,460 samples, 1.47%)</title><rect x="289.7" y="133" width="17.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="292.69" y="143.5" ></text>
</g>
<g >
<title>main::$_0::operator (868,896,094 samples, 31.04%)</title><rect x="10.0" y="341" width="366.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="13.02" y="351.5" >main::$_0::operator</text>
</g>
<g >
<title>operator new (787,306,609 samples, 28.13%)</title><rect x="44.4" y="293" width="331.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="47.42" y="303.5" >operator new</text>
</g>
<g >
<title>handle_mm_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="197" width="138.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="223.46" y="207.5" >handle_mm_fault</text>
</g>
<g >
<title>__tls_get_addr@plt (41,300,248 samples, 1.48%)</title><rect x="1053.9" y="325" width="17.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1056.90" y="335.5" ></text>
</g>
<g >
<title>NComponents::IntrusiveList&lt;NExecutors::TaskBase&gt;::IsEmpty (82,585,696 samples, 2.95%)</title><rect x="550.7" y="293" width="34.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="553.74" y="303.5" >NC..</text>
</g>
<g >
<title>__printf_buffer (6,306,709 samples, 0.23%)</title><rect x="1108.0" y="357" width="2.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1111.00" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="245" width="138.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="223.46" y="255.5" >asm_exc_page_fault</text>
</g>
<g >
<title>NComponents::IntrusiveList&lt;NExecutors::TaskBase&gt;::Pop (82,597,963 samples, 2.95%)</title><rect x="377.9" y="325" width="34.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="380.90" y="335.5" >NC..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (417,589,913 samples, 14.92%)</title><rect x="44.4" y="245" width="176.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="47.42" y="255.5" >entry_SYSCALL_64_after..</text>
</g>
<g >
<title>do_group_exit (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="373" width="76.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1116.30" y="383.5" >do_group..</text>
</g>
<g >
<title>change_p4d_range (80,942,320 samples, 2.89%)</title><rect x="78.8" y="117" width="34.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="81.85" y="127.5" >ch..</text>
</g>
<g >
<title>release_pages (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="149" width="76.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1116.30" y="159.5" >release_..</text>
</g>
<g >
<title>sync_regs (41,273,756 samples, 1.47%)</title><rect x="358.9" y="245" width="17.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="361.92" y="255.5" ></text>
</g>
<g >
<title>std::mutex::unlock (124,459,202 samples, 4.45%)</title><rect x="1001.4" y="309" width="52.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1004.43" y="319.5" >std::..</text>
</g>
<g >
<title>mas_prev_slot (172,457,541 samples, 6.16%)</title><rect x="130.4" y="101" width="72.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="133.35" y="111.5" >mas_prev..</text>
</g>
<g >
<title>_int_malloc (369,716,696 samples, 13.21%)</title><rect x="220.5" y="261" width="155.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="223.46" y="271.5" >_int_malloc</text>
</g>
<g >
<title>tlb_batch_pages_flush (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="181" width="76.7" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1116.30" y="191.5" >tlb_batc..</text>
</g>
<g >
<title>std::__shared_ptr&lt;NComponents::BasicFunction&lt;void  (40,411,737 samples, 1.44%)</title><rect x="27.4" y="261" width="17.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.38" y="271.5" ></text>
</g>
<g >
<title>NExecutors::internal::Worker::Start (1,520,958,562 samples, 54.34%)</title><rect x="412.7" y="325" width="641.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="415.72" y="335.5" >NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>__mprotect (417,589,913 samples, 14.92%)</title><rect x="44.4" y="261" width="176.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="47.42" y="271.5" >__mprotect</text>
</g>
<g >
<title>__gthread_mutex_unlock (41,251,945 samples, 1.47%)</title><rect x="914.1" y="293" width="17.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="917.12" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="421" width="728.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="380.90" y="431.5" >[libstdc++.so.6.0.33]</text>
</g>
<g >
<title>do_syscall_64 (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="421" width="76.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1116.30" y="431.5" >do_sysca..</text>
</g>
<g >
<title>mem_cgroup_commit_charge (41,102,498 samples, 1.47%)</title><rect x="255.3" y="117" width="17.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="258.26" y="127.5" ></text>
</g>
<g >
<title>do_anonymous_page (328,442,940 samples, 11.73%)</title><rect x="220.5" y="149" width="138.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="223.46" y="159.5" >do_anonymous_page</text>
</g>
<g >
<title>std::mutex::lock (41,340,542 samples, 1.48%)</title><rect x="984.0" y="309" width="17.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="987.00" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages (40,861,321 samples, 1.46%)</title><rect x="324.4" y="85" width="17.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="327.38" y="95.5" ></text>
</g>
<g >
<title>__pte_offset_map (39,657,020 samples, 1.42%)</title><rect x="96.3" y="53" width="16.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="99.25" y="63.5" ></text>
</g>
<g >
<title>[unknown] (3,723,932 samples, 0.13%)</title><rect x="376.3" y="405" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="379.32" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="245" width="1.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1109.13" y="255.5" ></text>
</g>
<g >
<title>NComponents::BasicFunction&lt;void  (868,896,094 samples, 31.04%)</title><rect x="10.0" y="373" width="366.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.02" y="383.5" >NComponents::BasicFunction&lt;void </text>
</g>
<g >
<title>do_user_addr_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="213" width="138.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="223.46" y="223.5" >do_user_addr_fault</text>
</g>
<g >
<title>__x64_sys_mprotect (417,589,913 samples, 14.92%)</title><rect x="44.4" y="197" width="176.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="47.42" y="207.5" >__x64_sys_mprotect</text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="373" width="728.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="380.90" y="383.5" >void std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>change_pmd_range.isra.0 (80,942,320 samples, 2.89%)</title><rect x="78.8" y="101" width="34.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="81.85" y="111.5" >ch..</text>
</g>
<g >
<title>mprotect_fixup (377,079,587 samples, 13.47%)</title><rect x="61.5" y="165" width="159.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="64.50" y="175.5" >mprotect_fixup</text>
</g>
<g >
<title>alloc_pages_mpol (40,861,321 samples, 1.46%)</title><rect x="324.4" y="101" width="17.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="327.38" y="111.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, NExecutors::internal::Worker::Start (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="341" width="728.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="380.90" y="351.5" >void std::__invoke_impl&lt;void, NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>mas_destroy (41,290,797 samples, 1.48%)</title><rect x="203.1" y="101" width="17.4" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="206.05" y="111.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="229" width="1.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1109.13" y="239.5" ></text>
</g>
<g >
<title>__strchrnul_evex (6,281,085 samples, 0.22%)</title><rect x="1110.7" y="357" width="2.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1113.66" y="367.5" ></text>
</g>
<g >
<title>zap_pte_range (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="213" width="76.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1116.30" y="223.5" >zap_pte_..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="389" width="728.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="380.90" y="399.5" >std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (3,723,932 samples, 0.13%)</title><rect x="376.3" y="389" width="1.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="379.32" y="399.5" ></text>
</g>
<g >
<title>unmap_vmas (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="277" width="76.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1116.30" y="287.5" >unmap_vmas</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="405" width="728.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="380.90" y="415.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>NComponents::IntrusiveList&lt;NExecutors::TaskBase&gt;::Pop (124,038,345 samples, 4.43%)</title><rect x="533.3" y="309" width="52.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="536.27" y="319.5" >NComp..</text>
</g>
<g >
<title>malloc (41,177,748 samples, 1.47%)</title><rect x="10.0" y="245" width="17.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="13.02" y="255.5" ></text>
</g>
<g >
<title>example_worload (2,799,127,172 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >example_worload</text>
</g>
<g >
<title>handle_mm_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="373" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1109.13" y="383.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_bulk (41,228,161 samples, 1.47%)</title><rect x="113.0" y="69" width="17.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="115.97" y="79.5" ></text>
</g>
<g >
<title>_int_malloc (41,177,748 samples, 1.47%)</title><rect x="10.0" y="229" width="17.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="13.02" y="239.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (41,300,967 samples, 1.48%)</title><rect x="966.6" y="277" width="17.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="969.59" y="287.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (41,055,803 samples, 1.47%)</title><rect x="341.6" y="101" width="17.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="344.61" y="111.5" ></text>
</g>
<g >
<title>[unknown] (872,676,900 samples, 31.18%)</title><rect x="10.0" y="437" width="367.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >[unknown]</text>
</g>
<g >
<title>free_pages_and_swap_cache (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="165" width="76.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1116.30" y="175.5" >free_pag..</text>
</g>
<g >
<title>std::__shared_ptr&lt;NComponents::BasicFunction&lt;void  (41,177,748 samples, 1.47%)</title><rect x="10.0" y="293" width="17.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.02" y="303.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="101" width="76.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1116.30" y="111.5" >free_pcp..</text>
</g>
<g >
<title>fibers::ctx::(anonymous namespace)::CallRunner (868,896,094 samples, 31.04%)</title><rect x="10.0" y="421" width="366.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="13.02" y="431.5" >fibers::ctx::(anonymous namespace)::CallRunner</text>
</g>
<g >
<title>vma_modify (254,976,499 samples, 9.11%)</title><rect x="113.0" y="149" width="107.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="115.97" y="159.5" >vma_modify</text>
</g>
<g >
<title>exc_page_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="405" width="1.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1109.13" y="415.5" ></text>
</g>
<g >
<title>kmem_cache_free (41,290,797 samples, 1.48%)</title><rect x="203.1" y="85" width="17.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="206.05" y="95.5" ></text>
</g>
<g >
<title>lru_add_fn (41,055,803 samples, 1.47%)</title><rect x="341.6" y="85" width="17.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="344.61" y="95.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (41,055,803 samples, 1.47%)</title><rect x="341.6" y="53" width="17.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="344.61" y="63.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="357" width="1.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1109.13" y="367.5" ></text>
</g>
<g >
<title>vma_alloc_folio (40,861,321 samples, 1.46%)</title><rect x="324.4" y="117" width="17.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="327.38" y="127.5" ></text>
</g>
<g >
<title>do_anonymous_page (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="325" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1109.13" y="335.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (417,589,913 samples, 14.92%)</title><rect x="44.4" y="181" width="176.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="47.42" y="191.5" >do_mprotect_pkey</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (3,723,932 samples, 0.13%)</title><rect x="376.3" y="421" width="1.6" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="379.32" y="431.5" ></text>
</g>
<g >
<title>mas_store_prealloc (41,290,797 samples, 1.48%)</title><rect x="203.1" y="117" width="17.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="206.05" y="127.5" ></text>
</g>
<g >
<title>mas_alloc_nodes (41,228,161 samples, 1.47%)</title><rect x="113.0" y="85" width="17.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="115.97" y="95.5" ></text>
</g>
<g >
<title>handle_pte_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="341" width="1.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1109.13" y="351.5" ></text>
</g>
<g >
<title>___slab_alloc (41,228,161 samples, 1.47%)</title><rect x="113.0" y="37" width="17.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="115.97" y="47.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (41,300,635 samples, 1.48%)</title><rect x="1071.3" y="325" width="17.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1074.31" y="335.5" ></text>
</g>
<g >
<title>x64_sys_call (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="405" width="76.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1116.30" y="415.5" >x64_sys_..</text>
</g>
<g >
<title>slab_update_freelist.isra.0 (41,290,797 samples, 1.48%)</title><rect x="203.1" y="53" width="17.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="206.05" y="63.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (83,231,249 samples, 2.97%)</title><rect x="931.5" y="277" width="35.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="934.51" y="287.5" >__..</text>
</g>
<g >
<title>NComponents::BasicFunction&lt;void  (41,177,748 samples, 1.47%)</title><rect x="10.0" y="325" width="17.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.02" y="335.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (123,899,888 samples, 4.43%)</title><rect x="585.6" y="309" width="52.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="588.56" y="319.5" >std::..</text>
</g>
<g >
<title>mas_preallocate (41,228,161 samples, 1.47%)</title><rect x="113.0" y="117" width="17.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="115.97" y="127.5" ></text>
</g>
<g >
<title>__handle_mm_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="181" width="138.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="223.46" y="191.5" >__handle_mm_fault</text>
</g>
<g >
<title>__gthread_mutex_lock (371,906,971 samples, 13.29%)</title><rect x="655.2" y="277" width="156.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="658.20" y="287.5" >__gthread_mutex_lock</text>
</g>
<g >
<title>mas_prev (172,457,541 samples, 6.16%)</title><rect x="130.4" y="117" width="72.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="133.35" y="127.5" >mas_prev</text>
</g>
<g >
<title>__slab_free (41,290,797 samples, 1.48%)</title><rect x="203.1" y="69" width="17.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="206.05" y="79.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (41,177,748 samples, 1.47%)</title><rect x="10.0" y="277" width="17.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.02" y="287.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="229" width="76.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1116.30" y="239.5" >zap_pmd_..</text>
</g>
<g >
<title>try_charge_memcg (40,571,182 samples, 1.45%)</title><rect x="272.6" y="117" width="17.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="275.59" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;NExecutors::internal::Worker::Start (1,727,457,443 samples, 61.71%)</title><rect x="377.9" y="357" width="728.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="380.90" y="367.5" >std::__invoke_result&lt;NExecutors::internal::Worker::Start</text>
</g>
<g >
<title>_IO_fwrite (3,723,932 samples, 0.13%)</title><rect x="376.3" y="373" width="1.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="379.32" y="383.5" ></text>
</g>
<g >
<title>all (2,799,127,172 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>NComponents::BasicFunction&lt;void  (40,411,737 samples, 1.44%)</title><rect x="27.4" y="293" width="17.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="30.38" y="303.5" ></text>
</g>
<g >
<title>__count_memcg_events (41,102,498 samples, 1.47%)</title><rect x="255.3" y="101" width="17.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="258.26" y="111.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (164,230,634 samples, 5.87%)</title><rect x="220.5" y="133" width="69.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="223.46" y="143.5" >__mem_c..</text>
</g>
<g >
<title>std::mutex::unlock (124,532,216 samples, 4.45%)</title><rect x="931.5" y="293" width="52.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="934.51" y="303.5" >std::..</text>
</g>
<g >
<title>tlb_flush_mmu (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="197" width="76.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1116.30" y="207.5" >tlb_flus..</text>
</g>
<g >
<title>folio_add_lru (41,055,803 samples, 1.47%)</title><rect x="341.6" y="117" width="17.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="344.61" y="127.5" ></text>
</g>
<g >
<title>std::mutex::lock (371,906,971 samples, 13.29%)</title><rect x="655.2" y="293" width="156.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="658.20" y="303.5" >std::mutex::lock</text>
</g>
<g >
<title>vma_merge (254,976,499 samples, 9.11%)</title><rect x="113.0" y="133" width="107.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="115.97" y="143.5" >vma_merge</text>
</g>
<g >
<title>change_protection (122,103,088 samples, 4.36%)</title><rect x="61.5" y="149" width="51.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="64.50" y="159.5" >chang..</text>
</g>
<g >
<title>__mmput (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="309" width="76.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1116.30" y="319.5" >__mmput</text>
</g>
<g >
<title>free_unref_page_commit (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="117" width="76.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1116.30" y="127.5" >free_unr..</text>
</g>
<g >
<title>mas_node_count_gfp (41,228,161 samples, 1.47%)</title><rect x="113.0" y="101" width="17.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="115.97" y="111.5" ></text>
</g>
<g >
<title>change_pte_range (80,942,320 samples, 2.89%)</title><rect x="78.8" y="85" width="34.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="81.85" y="95.5" >ch..</text>
</g>
<g >
<title>handle_pte_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="165" width="138.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="223.46" y="175.5" >handle_pte_fault</text>
</g>
<g >
<title>consume_stock (40,571,182 samples, 1.45%)</title><rect x="272.6" y="101" width="17.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="275.59" y="111.5" ></text>
</g>
<g >
<title>mod_memcg_state (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="197" width="1.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1109.13" y="207.5" ></text>
</g>
<g >
<title>__pte_alloc (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="309" width="1.9" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1109.13" y="319.5" ></text>
</g>
<g >
<title>__GI___snprintf (12,587,794 samples, 0.45%)</title><rect x="1108.0" y="389" width="5.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1111.00" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="421" width="1.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1109.13" y="431.5" ></text>
</g>
<g >
<title>free_unref_page_list (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="133" width="76.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1116.30" y="143.5" >free_unr..</text>
</g>
<g >
<title>__mempcpy_evex_unaligned_erms (3,723,932 samples, 0.13%)</title><rect x="376.3" y="357" width="1.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="379.32" y="367.5" ></text>
</g>
<g >
<title>alloc_pages (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="277" width="1.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1109.13" y="287.5" ></text>
</g>
<g >
<title>x64_sys_call (417,589,913 samples, 14.92%)</title><rect x="44.4" y="213" width="176.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="47.42" y="223.5" >x64_sys_call</text>
</g>
<g >
<title>operator new (41,177,748 samples, 1.47%)</title><rect x="10.0" y="261" width="17.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="13.02" y="271.5" ></text>
</g>
<g >
<title>alloc_anon_folio (40,861,321 samples, 1.46%)</title><rect x="324.4" y="133" width="17.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="327.38" y="143.5" ></text>
</g>
<g >
<title>__pte_offset_map_lock (39,657,020 samples, 1.42%)</title><rect x="96.3" y="69" width="16.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="99.25" y="79.5" ></text>
</g>
<g >
<title>unmap_single_vma (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="261" width="76.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1116.30" y="271.5" >unmap_si..</text>
</g>
<g >
<title>__x64_sys_exit_group (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="389" width="76.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1116.30" y="399.5" >__x64_sy..</text>
</g>
<g >
<title>pte_alloc_one (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="293" width="1.9" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1109.13" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="261" width="1.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1109.13" y="271.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (41,055,803 samples, 1.47%)</title><rect x="341.6" y="133" width="17.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="344.61" y="143.5" ></text>
</g>
<g >
<title>malloc (787,306,609 samples, 28.13%)</title><rect x="44.4" y="277" width="331.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="47.42" y="287.5" >malloc</text>
</g>
<g >
<title>fibers::Go (827,718,346 samples, 29.57%)</title><rect x="27.4" y="325" width="348.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="30.38" y="335.5" >fibers::Go</text>
</g>
<g >
<title>memcg_account_kmem (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="213" width="1.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1109.13" y="223.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (41,300,035 samples, 1.48%)</title><rect x="1088.7" y="325" width="17.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1091.72" y="335.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (12,587,794 samples, 0.45%)</title><rect x="1108.0" y="373" width="5.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1111.00" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (417,589,913 samples, 14.92%)</title><rect x="44.4" y="229" width="176.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="47.42" y="239.5" >do_syscall_64</text>
</g>
<g >
<title>std::shared_ptr&lt;NComponents::BasicFunction&lt;void  (41,177,748 samples, 1.47%)</title><rect x="10.0" y="309" width="17.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.02" y="319.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (41,264,952 samples, 1.47%)</title><rect x="237.9" y="117" width="17.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="240.87" y="127.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (41,293,191 samples, 1.48%)</title><rect x="949.2" y="261" width="17.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="952.19" y="271.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (41,292,002 samples, 1.48%)</title><rect x="220.5" y="117" width="17.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="223.46" y="127.5" ></text>
</g>
<g >
<title>__mod_memcg_state (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="181" width="1.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1109.13" y="191.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (413,207,464 samples, 14.76%)</title><rect x="637.8" y="309" width="174.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="640.79" y="319.5" >std::lock_guard&lt;std::m..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (330,606,006 samples, 11.81%)</title><rect x="672.6" y="261" width="139.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="675.61" y="271.5" >pthread_mutex_loc..</text>
</g>
<g >
<title>__kmem_cache_alloc_bulk (41,228,161 samples, 1.47%)</title><rect x="113.0" y="53" width="17.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="115.97" y="63.5" ></text>
</g>
<g >
<title>fibers::Go (827,718,346 samples, 29.57%)</title><rect x="27.4" y="309" width="348.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="30.38" y="319.5" >fibers::Go</text>
</g>
<g >
<title>exit_mm (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="341" width="76.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1116.30" y="351.5" >exit_mm</text>
</g>
<g >
<title>cgroup_rstat_updated (41,102,498 samples, 1.47%)</title><rect x="255.3" y="85" width="17.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="258.26" y="95.5" ></text>
</g>
<g >
<title>clone3 (1,744,475,000 samples, 62.32%)</title><rect x="377.9" y="437" width="735.4" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="380.90" y="447.5" >clone3</text>
</g>
<g >
<title>do_user_addr_fault (4,429,763 samples, 0.16%)</title><rect x="1106.1" y="389" width="1.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1109.13" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (41,236,722 samples, 1.47%)</title><rect x="307.0" y="133" width="17.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="310.00" y="143.5" ></text>
</g>
<g >
<title>start_thread (12,587,794 samples, 0.45%)</title><rect x="1108.0" y="421" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1111.00" y="431.5" ></text>
</g>
<g >
<title>name_stack_maps (12,587,794 samples, 0.45%)</title><rect x="1108.0" y="405" width="5.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1111.00" y="415.5" ></text>
</g>
<g >
<title>fibers::coro::StackfullCoroutine::Run (868,896,094 samples, 31.04%)</title><rect x="10.0" y="389" width="366.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="13.02" y="399.5" >fibers::coro::StackfullCoroutine::Run</text>
</g>
<g >
<title>exit_mmap (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="293" width="76.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1116.30" y="303.5" >exit_mmap</text>
</g>
<g >
<title>unmap_page_range (181,932,634 samples, 6.50%)</title><rect x="1113.3" y="245" width="76.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1116.30" y="255.5" >unmap_pa..</text>
</g>
<g >
<title>exc_page_fault (328,442,940 samples, 11.73%)</title><rect x="220.5" y="229" width="138.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="223.46" y="239.5" >exc_page_fault</text>
</g>
<g >
<title>std::shared_ptr&lt;NComponents::BasicFunction&lt;void  (40,411,737 samples, 1.44%)</title><rect x="27.4" y="277" width="17.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="30.38" y="287.5" ></text>
</g>
<g >
<title>fibers::ctx::Context::Run (868,896,094 samples, 31.04%)</title><rect x="10.0" y="405" width="366.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.02" y="415.5" >fibers::ctx::Context::Run</text>
</g>
<g >
<title>lru_gen_add_folio (41,055,803 samples, 1.47%)</title><rect x="341.6" y="69" width="17.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="344.61" y="79.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (408,066,597 samples, 14.58%)</title><rect x="812.0" y="309" width="172.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="814.98" y="319.5" >std::lock_guard&lt;std::m..</text>
</g>
<g >
<title>NComponents::IntrusiveList&lt;NExecutors::TaskBase&gt;::IsEmpty (82,602,846 samples, 2.95%)</title><rect x="498.4" y="309" width="34.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="501.45" y="319.5" >NC..</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (41,055,803 samples, 1.47%)</title><rect x="341.6" y="37" width="17.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="344.61" y="47.5" ></text>
</g>
</g>
</svg>
